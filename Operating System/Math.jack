class Math{
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    function void init(){
        let powersOfTwo = Array.new(15);
        let powersOfTwo[0] = 16384;
        let powersOfTwo[1] = 8192;
        let powersOfTwo[2] = 4096;
        let powersOfTwo[3] = 2048;
        let powersOfTwo[4] = 1024;
        let powersOfTwo[5] = 512;
        let powersOfTwo[6] = 256;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 64;
        let powersOfTwo[9] = 32;
        let powersOfTwo[10] = 16;
        let powersOfTwo[11] = 8;
        let powersOfTwo[12] = 4;
        let powersOfTwo[13] = 2;
        let powersOfTwo[14] = 1;
        return 0;
    }

    function boolean bitOne(int n, int i){
        return ((powersOfTwo[i] & n) > 0);
    }

    function int multiply(int x, int y){
        var int sum, xShifted, i;
        var boolean neg;
        let neg = false;
        if ((x < 0 & y > 0)|(x > 0 & y < 0)){
            let neg = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        let sum = 0;
        let xShifted = x;
            
        // works by the long multiplication algorithm
        // log(n) running time
        let i = 0;
        while (i < 15){
            if (Math.bitOne(y,14-i)){
                let sum = sum + xShifted;
            }
            let xShifted = xShifted + xShifted;
            let i = i + 1;
        }
        if (neg){
            return -sum;
        }
        return sum;
    }

    // returns the integer part of x/y
    // based on x/2 = 2*((x/2)/y)
    function int divide(int x, int y) {
        var int q;
        var boolean neg;
        let neg = false;
        if (x < 0){
            let x = -x;
            let neg = ~neg;
        }
        if (y < 0){
            let y = -y;
            let neg = ~neg;
        }

        if (y > x) {
            return 0;
        }
        let q = x/(2*y);
        if ((x - (2 * q * y)) < y){
            if (neg){
                return -(2 * q);
            }
            else{
                return (2 * q);
            }
        }
        else{
            if (neg){
                return -(2 * q + 1);
            }
            else{
                return ((2 * q) + 1);
            }
        }
    }

    function int pwr(int a, int b) {
        var int i, res;
        let i = 1;
        let res = a;
        while (i < b){
            let res = res * a;
            let i = i + 1;
        }
        return res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, q, qsq;
        //getting the number of bits in y        
        let q = 0;        
        let j = 7;
        while (j > -1) {
            let q = y + powersOfTwo[14-j];
            let qsq = q * q;
            if ((qsq > 0) & ((qsq < x) | (qsq = x))) {
            let y = q;
            }
            let j = j - 1;
        }
        return y;
        }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > (b - 1)) {
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < (b + 1)){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        return x;
    }
}